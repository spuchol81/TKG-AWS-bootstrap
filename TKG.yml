---
# This template will setup the required resources to bootstrap a TKGm managemnt cluster and a first workload cluster in an AWS account
#
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "EC2 and connectivity options"
        Parameters: 
          - Ec2InstanceAmi
          - SSHKeyName
          - SSHCidrBlock
          - VpcId
          - SubnetId
      - 
        Label: 
          default: "TKG Deployment configuration options"
        Parameters: 
          - CreateIAMPrereqs
          - S3DeliveryBucketName
          - TKGMgmtName
          - CreateWorkloadCLuster
          - TKGWorkName
      - 
        Label: 
          default: "TMC configuration options, clusters will be enrolled with their hostname"
        Parameters:
          - TMCEnrollCLusters 
          - TmcClusterGroup
          - TmcApiToken
      - 
        Label: 
          default: "Gitops configuration option, the workload cluster will be enrolled with his hostname"
        Parameters:
          - GitopsEnrollWorkloadCLuster
          - GitopsSecret

Parameters:

  CreateIAMPrereqs:
    Description: Whether I should create IAM resources. IAM service is global so overlaping with previous deployments, even in other regions, can occur
    Default: true
    Type: String
    AllowedValues: [true, false]
  
  CreateWorkloadCLuster:
    Description: Whether I should create a first workload cluster.
    Default: false
    Type: String
    AllowedValues: [true, false]
  
  TMCEnrollCLusters:
    Description: Whether I should enroll created clusters to TMC.
    Default: false
    Type: String
    AllowedValues: [true, false]
  
  GitopsEnrollWorkloadCLuster:
    Description: Whether I should enroll the workload cluster to a fluxcd fleet management repo.
    Default: false
    Type: String
    AllowedValues: [true, false]

  SSHKeyName:
    Description: Name of the ssh key used to access ec2 hosts. Set this up ahead of time.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  SSHCidrBlock:
    Default: "0.0.0.0/0"
    Description: Source CIDR allowed to SSH the bootstrap server
    Type: String
  
  TKGMgmtName:
    Default: "spu-tkg-mgmt"
    Description: the name of the management cluster to deploy
    Type: String
  
  TKGWorkName:
    Default: "spu-tkg-work-01"
    Description: the name of the workload cluster to deploy
    Type: String
  
  TmcClusterGroup:
    Default: "spu-demo"
    Description: the name of the target cluster group in TMC (must exist)
    Type: String
  
  TmcApiToken:
    Default: "TMC_API_TOKEN"
    Description: the name of the secret inside secret manager containing your TMC API TOKEN
    Type: String
  
  GitopsSecret:
    Default: "fluxcd_token"
    Description: the name of the secret inside secret manager containing your git username,repo and token
    Type: String

  S3DeliveryBucketName:
    Default: spu-tanzu-binaries
    Description: Name of the existing S3 bucket used to deliver Tanzu binairies
    Type: String

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC used to launch bootstrap instance
  
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet used to launch bootstrap instance

  Ec2InstanceAmi:
    Description: The AMI to use when creating the EC2 instance.
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id'

Resources:


  # The EC2 instance assumes this role.
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess


  # The instance profile for your EC2 instance.
  GeneralInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: InstanceRole
    Properties:
      Roles:
        - !Ref InstanceRole

  # The security group for your EC2 instance.
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AWS Ground Station receiver instance security group.
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        # Allow SSH access from the CIDR block specified in the parameters.
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHCidrBlock
          Description: "SSH flow to Bootstrap Server"

  # The EC2 instance that will send/receive data to/from your satellite using AWS Ground Station.
  BootstrapInstance:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      IamInstanceProfile: !Ref GeneralInstanceProfile
      ImageId: !Ref Ec2InstanceAmi
      InstanceType: t3.large
      KeyName: !Ref SSHKeyName
      Monitoring: true
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
          - Ref: InstanceSecurityGroup
      Tags: 
        - Key: "Name"
          Value: "TKGJumpbox"
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash
              export HOME=/root
              export AWS_REGION=${Region}
              export AWS_DEFAULT_REGION=${Region}
              export MGMT_CLUSTER_NAME=${TKGMgmtName}
              export WORK_CLUSTER_NAME=${TKGWorkName}
              export AWS_SSH_KEY_NAME=${SSHKeyName}
              export CREATE_IAM_PREREQS=${CreateIAMPrereqs}
              export CREATE_WORKLOAD_CLUSTER=${CreateWorkloadCLuster}
              export TMC_CLUSTER_GROUP=${TmcClusterGroup}
              export ENROLL_TMC=${TMCEnrollCLusters}
              export ENROLL_GITOPS=${GitopsEnrollWorkloadCLuster}
              

              #Install Prereqs
              apt-get -y update
              apt-get -y install ca-certificates curl gnupg lsb-release

              #Install Docker
              mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg

              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

              apt-get -y update
              apt-get -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin
              #usermod -aG docker ubuntu
              systemctl start docker

              #Install AWScli
              apt-get -y update
              apt-get install awscli -y
              apt-get install jq -y
              curl -s https://fluxcd.io/install.sh | sudo bash

              #Get TKG binaries from S3 and Install
              aws s3 sync s3://${S3DeliveryBucketName}/TKG1.5.4 /tmp/TKG1.5.4
              cd /tmp/TKG1.5.4
              tar zxvf tanzu-cli-bundle-linux-amd64.tar.gz
              cd cli
              install core/v0.11.6/tanzu-core-linux_amd64 /usr/local/bin/tanzu
              cd ..
              gunzip kubectl-linux-v1.22.9+vmware.1.gz
              mv kubectl-linux-v1.22.9+vmware.1 kubectl
              install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
              install tmc /usr/local/bin/tmc

              #Instal Carvel
              wget -O- https://carvel.dev/install.sh > install.sh
              bash install.sh

              #reset perms to manage tanzu with ubuntu user
              #chown -R ubuntu:ubuntu /tmp/TKG1.5.4/
              #chown -R ubuntu:ubuntu /home/ubuntu

              #Configure tanzu cli
              #su ubuntu -c 'tanzu version; groups'
              #su ubuntu -c 'cd /tmp/TKG1.5.4; tanzu plugin install --local cli all'
              tanzu version
              tanzu plugin install all

              if [ "$CREATE_IAM_PREREQS" = "true" ]
              then
              #bootstrap permissions of the account
              tanzu management-cluster permissions aws set
              fi

              #Install mgmgt cluster
              ytt -f mgmt-cluster-template.yml -f schema.yml -v MGMT_CLUSTER_NAME=$MGMT_CLUSTER_NAME -v AWS_REGION=$AWS_REGION -v AWS_SSH_KEY_NAME=$AWS_SSH_KEY_NAME > mgmt-cluster-manifest.yml
              #chown ubuntu:ubuntu mgmt-cluster-manifest.yml
              tanzu management-cluster create --file mgmt-cluster-manifest.yml

              if [ "$ENROLL_TMC" = "true" ]
              then
              #login to TMC
              export TMC_API_TOKEN=`aws secretsmanager get-secret-value --secret-id ${TmcApiToken} --query SecretString --output text`
              tmc login -n $TMC_CLUSTER_GROUP -c

              #attach the cluster (name must be unique across your org)
              tmc managementcluster register $MGMT_CLUSTER_NAME -c $TMC_CLUSTER_GROUP -p TKG -k /root/.kube/config
              fi
              
              if [ "$CREATE_WORKLOAD_CLUSTER" = "true" ]
              then
              #generate workload cluster accordingly
              ytt -f workload-cluster-template.yml -f schema.yml -v WORK_CLUSTER_NAME=$WORK_CLUSTER_NAME -v AWS_REGION=$AWS_REGION -v AWS_SSH_KEY_NAME=$AWS_SSH_KEY_NAME > workload-cluster-manifest.yml
              #chown ubuntu:ubuntu  workload-cluster-manifest.yml

              #Install workload cluster
              tanzu cluster create --file workload-cluster-manifest.yml

              #retrieve and use kubeconfig
              tanzu cluster kubeconfig get $WORK_CLUSTER_NAME --admin
              kubectl config use-context $WORK_CLUSTER_NAME-admin@$WORK_CLUSTER_NAME

              if [ "$ENROLL_TMC" = "true" ]
              then
              #login to TMC
              export TMC_API_TOKEN=`aws secretsmanager get-secret-value --secret-id ${TmcApiToken} --query SecretString --output text`
              tmc login -n $TMC_CLUSTER_GROUP -c

              #attach the cluster (name must be unique across your org)
              tmc cluster attach -g $TMC_CLUSTER_GROUP -n $WORK_CLUSTER_NAME -k /root/.kube/config
              fi

              if [ "$ENROLL_GITOPS" = "true" ]
              then
              export GITHUB_TOKEN=`aws secretsmanager get-secret-value --secret-id ${GitopsSecret} | jq --raw-output '.SecretString' | jq -r .GITHUB_TOKEN`
              export GITHUB_USER=`aws secretsmanager get-secret-value --secret-id ${GitopsSecret} | jq --raw-output '.SecretString' | jq -r .GITHUB_USER`
              export GITHUB_REPO=`aws secretsmanager get-secret-value --secret-id ${GitopsSecret} | jq --raw-output '.SecretString' | jq -r .GITHUB_REPO`
              flux bootstrap github --owner=$GITHUB_USER --repository=$GITHUB_REPO --branch=main --path=./clusters/$WORK_CLUSTER_NAME --personal
              fi
              
              fi
              exit 0
            - Region: !Ref AWS::Region
              SSHKeyName: !Ref SSHKeyName
              TKGMgmtName: !Ref TKGMgmtName
              TKGWorkName: !Ref TKGWorkName
              S3DeliveryBucketName: !Ref S3DeliveryBucketName
              CreateIAMPrereqs: !Ref CreateIAMPrereqs
              CreateWorkloadCLuster: !Ref CreateWorkloadCLuster
              TmcClusterGroup: !Ref TmcClusterGroup
              TmcApiToken: !Ref TmcApiToken
              GitopsSecret: !Ref GitopsSecret
              TMCEnrollCLusters: !Ref TMCEnrollCLusters
              GitopsEnrollWorkloadCLuster: !Ref GitopsEnrollWorkloadCLuster



