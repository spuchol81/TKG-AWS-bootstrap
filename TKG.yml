---
# This template will setup the required resources to bootstrap a TKGm managemnt cluster and a first workload cluster in an AWS account
#

Parameters:

  SSHKeyName:
    Description: Name of the ssh key used to access ec2 hosts. Set this up ahead of time.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  SSHCidrBlock:
    Default: "0.0.0.0/0"
    Description: Source CIDR allowed to SSH the bootstrap server
    Type: String
  
  TKGMgmtName:
    Default: "spu-tkg-mgmt"
    Description: the name of the management cluster to deploy
    Type: String
  
  TKGWorkName:
    Default: "spu-tkg-work-01"
    Description: the name of the workload cluster to deploy
    Type: String

  S3DeliveryBucketName:
    Default: spu-tanzu-binaries
    Description: Name of the existing S3 bucket used to deliver Tanzu binairies
    Type: String

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC used to launch bootstrap instance
  
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet used to launch bootstrap instance

  Ec2InstanceAmi:
    Description: The AMI to use when creating the EC2 instance.
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/canonical/ubuntu/server/jammy/stable/current/amd64/hvm/ebs-gp2/ami-id'

Resources:


  # The EC2 instance assumes this role.
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess


  # The instance profile for your EC2 instance.
  GeneralInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: InstanceRole
    Properties:
      Roles:
        - !Ref InstanceRole

  # The security group for your EC2 instance.
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: AWS Ground Station receiver instance security group.
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        # Allow SSH access from the CIDR block specified in the parameters.
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHCidrBlock
          Description: "SSH flow to Bootstrap Server"

  # The EC2 instance that will send/receive data to/from your satellite using AWS Ground Station.
  BootstrapInstance:
    Type: AWS::EC2::Instance
    Properties:
      DisableApiTermination: false
      IamInstanceProfile: !Ref GeneralInstanceProfile
      ImageId: !Ref Ec2InstanceAmi
      InstanceType: t2.medium
      KeyName: !Ref SSHKeyName
      Monitoring: true
      SubnetId: !Ref SubnetId
      SecurityGroupIds:
          - Ref: InstanceSecurityGroup
      Tags: 
        - Key: "Name"
          Value: "TKGJumpbox"
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash
              export HOME=/home/ubuntu
              export AWS_REGION=${Region}
              export AWS_DEFAULT_REGION=${Region}
              export MGMT_CLUSTER_NAME=${TKGMgmtName}
              export CLUSTER_NAME=${TKGWorkName}
              export AWS_SSH_KEY_NAME=${SSHKeyName}

              #Install Prereqs
              apt-get -y update
              apt-get -y install ca-certificates curl gnupg lsb-release

              #Install Docker
              mkdir -p /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg

              echo \
                "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
                $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

              apt-get -y update
              apt-get -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin
              usermod -aG docker ubuntu
              systemctl start docker

              #Install AWScli
              apt-get -y update
              apt-get install awscli -y

              #Get TKG binaries from S3 and Install
              aws s3 sync s3://spu-tanzu-binaries/TKG1.4.3 /tmp/TKG1.4.3
              cd /tmp/TKG1.4.3
              tar -xvf tanzu-cli-bundle-linux-amd64.tar
              cd cli
              install core/v1.4.3/tanzu-core-linux_amd64 /usr/local/bin/tanzu
              cd ..
              gunzip kubectl-linux-v1.21.8+vmware.1.gz
              mv kubectl-linux-v1.21.8+vmware.1 kubectl
              install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

              #Instal Carvel
              wget -O- https://carvel.dev/install.sh > install.sh
              bash install.sh

              #reset perms to manage tanzu with ubuntu user
              chown -R ubuntu:ubuntu /tmp/TKG1.4.3/
              chown -R ubuntu:ubuntu /home/ubuntu

              #Configure tanzu cli
              su ubuntu -c 'tanzu version; groups'
              su ubuntu -c 'cd /tmp/TKG1.4.3; tanzu plugin install --local cli all'
              #bootstrap permissions of the account
              su ubuntu -c 'tanzu management-cluster permissions aws set'
              #Install mgmgt cluster
              ytt -f mgmt-cluster-template.yml -f schema.yml -v MGMT_CLUSTER_NAME=$MGMT_CLUSTER_NAME -v AWS_REGION=$AWS_REGION -v AWS_SSH_KEY_NAME=$AWS_SSH_KEY_NAME > mgmt-cluster-manifest.yml
              chown ubuntu:ubuntu mgmt-cluster-manifest.yml
              su ubuntu -c 'cd /tmp/TKG1.4.3; tanzu management-cluster create --file mgmt-cluster-manifest.yml'
              exit 0
            - Region: !Ref AWS::Region
              SSHKeyName: !Ref SSHKeyName
              TKGMgmtName: !Ref TKGMgmtName
              TKGWorkName: !Ref TKGWorkName


